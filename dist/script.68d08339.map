{"version":3,"sources":["scripts\\script.js"],"names":["timeNav","document","querySelector","nav","queueP","servingP","servingNumber","perfNumber","perfChartDOM","getContext","kegLevelChartDOM","storageLevelChartDOM","modalButton","querySelectorAll","modalWindow","modalH2","modalP","modalCloseButton","modalVisible","burgerMenu","mobileMenuVisible","updateInterval","updatePerformanceInterval","updateKegLevelInterval","updateStorageLevelInterval","data","update","updatePerformance","perfChart","kegLevelChart","updateKegLevel","storageLevelChart","updateStorageLevel","kegLevel","storageLevel","perf","avgT","avgPerf","timePerClient","currentS","previousS","order","addEventListener","init","setInterval","updateTime","updateData","console","log","displayData","displayPerf","updateKegLevelData","updateStorageLevelData","displayPerfChart","displayKegLevelChart","updateKegLevelChart","displayStorageLevelChart","updateStorageLevelChart","forEach","btn","toggleModalWindow","toggleMobileMenu","JSON","parse","FooBar","getData","queueNumber","queue","length","textContent","serving","calcPerf","Array","prototype","diff","a","filter","i","indexOf","id","push","newClient","servedClient","Date","now","neededTime","slice","shift","timeCombined","elem","averageTime","Math","floor","isNaN","updatePerfChart","Chart","type","responsive","maintainAspectRatio","datasets","backgroundColor","borderWidth","options","legend","rotation","PI","circumference","events","status","color","bad","okay","good","height","labels","label","scales","yAxes","ticks","suggestedMin","suggestedMax","beginAtZero","min","max","stepSize","taps","beerVar","keg","beer","toLowerCase","replace","short","elhefe","fairytaleale","hollabacklager","githop","hoppilyeverafter","mowintime","row26","ruinedchildhood","sleighride","steampunk","name","level","storage","amount","e","style","removeProperty","target","dataset","text","header","body","topBox","top","innerHTML","date","hours","getHours","getMinutes","sec","getSeconds"],"mappings":"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","file":"script.68d08339.map","sourceRoot":"..","sourcesContent":["\"use strict\";\r\n/* ==========================================================================\r\n   General\r\n   ========================================================================== */\r\n\r\n//*** Nav\r\nconst timeNav = document.querySelector(\"#timeNav p\");\r\nconst nav = document.querySelector(\"nav\");\r\n\r\n//*** Top-box\r\nconst queueP = document.querySelector(\"#top-box .queue p\");\r\nconst servingP = document.querySelector(\"#top-box .serving p\");\r\nconst servingNumber = document.querySelector(\"#top-box .serving p\");\r\nconst perfNumber = document.querySelector(\"#top-box .performance .perf-value\");\r\nconst perfChartDOM = document.querySelector(\"#perf-chart\").getContext(\"2d\");\r\n\r\n//*** Storage and Keg level canvas\r\nconst kegLevelChartDOM = document\r\n  .querySelector(\"#keg-level-chart\")\r\n  .getContext(\"2d\");\r\nconst storageLevelChartDOM = document\r\n  .querySelector(\"#storage-level-chart\")\r\n  .getContext(\"2d\");\r\n\r\n//*** Modal Window\r\nconst modalButton = document.querySelectorAll(\".display-modal-button\");\r\nconst modalWindow = document.querySelector(\"#modal\");\r\nconst modalH2 = document.querySelector(\"#modal h2\");\r\nconst modalP = document.querySelector(\"#modal p\");\r\nconst modalCloseButton = document.querySelector(\"#modal button\");\r\nlet modalVisible = false;\r\n\r\n//*** Mobile Menu (Burger Menu)\r\nconst burgerMenu = document.querySelector(\"#burger-menu\");\r\nlet mobileMenuVisible = false;\r\n\r\n//*** Variables\r\nconst updateInterval = 1000; //update data every 1s;\r\nconst updatePerformanceInterval = 15000; //update performance every 15s\r\nconst updateKegLevelInterval = 1000; //update keg level every 1s\r\nconst updateStorageLevelInterval = 1000; //update storage level every 1s\r\n\r\nlet data,\r\n  update,\r\n  updatePerformance,\r\n  perfChart,\r\n  kegLevelChart,\r\n  updateKegLevel,\r\n  storageLevelChart,\r\n  updateStorageLevel;\r\n\r\nlet kegLevel = [];\r\nlet storageLevel = [];\r\n\r\n//perf is used to calculate performance\r\nlet perf = {\r\n  avgT: 10000,\r\n  avgPerf: 15000,\r\n  timePerClient: [15000],\r\n  currentS: [],\r\n  previousS: [],\r\n  order: {}\r\n};\r\n\r\n/* ==========================================================================\r\n   Initilaize\r\n   ========================================================================== */\r\ndocument.addEventListener(\"DOMContentLoaded\", init);\r\nfunction init() {\r\n  //Update the time in the navbar every 1s\r\n  setInterval(() => {\r\n    updateTime();\r\n  }, 1000);\r\n\r\n  //Get data and console log it\r\n  updateData();\r\n  console.log(data);\r\n\r\n  //Update and display data ever x seconds\r\n  update = setInterval(() => {\r\n    updateData();\r\n    displayData();\r\n  }, updateInterval);\r\n\r\n  // Calculate, update and display performance every x seconds\r\n  updatePerformance = setInterval(() => {\r\n    displayPerf();\r\n  }, updatePerformanceInterval);\r\n\r\n  //Update Keg level data and update chart every x seconds\r\n  updateKegLevel = setInterval(() => {\r\n    updateKegLevelData();\r\n  }, updateKegLevelInterval);\r\n\r\n  //Update Storage level data and update chart every x seconds\r\n  updateStorageLevel = setInterval(() => {\r\n    updateStorageLevelData();\r\n  }, updateStorageLevelInterval);\r\n\r\n  //Run functions on page load\r\n  displayData();\r\n  displayPerfChart();\r\n  displayKegLevelChart();\r\n  updateKegLevelData();\r\n  updateKegLevelChart();\r\n  displayStorageLevelChart();\r\n  updateStorageLevelData();\r\n  updateStorageLevelChart();\r\n  updateTime();\r\n\r\n  //Add event listener to Modal Window\r\n  modalButton.forEach(btn => {\r\n    btn.addEventListener(\"click\", toggleModalWindow);\r\n  });\r\n  modalCloseButton.addEventListener(\"click\", toggleModalWindow);\r\n\r\n  //Add event listener burger menu\r\n  burgerMenu.addEventListener(\"click\", toggleMobileMenu);\r\n}\r\n\r\n/* ==========================================================================\r\n   Update data\r\n   ========================================================================== */\r\nfunction updateData() {\r\n  data = JSON.parse(FooBar.getData());\r\n  //console.log(data);\r\n}\r\n\r\n/* ==========================================================================\r\n   Display data\r\n   ========================================================================== */\r\nfunction displayData() {\r\n  //Queue text number update\r\n  let queueNumber = data.queue.length;\r\n  if (queueNumber < 10) {\r\n    queueNumber = \"0\" + queueNumber;\r\n  }\r\n  queueP.textContent = queueNumber;\r\n\r\n  //Serving text number update\r\n  let servingNumber = data.serving.length;\r\n  if (servingNumber < 10) {\r\n    servingNumber = \"0\" + servingNumber;\r\n  }\r\n  servingP.textContent = servingNumber;\r\n\r\n  //Performance text and graph update\r\n  calcPerf();\r\n}\r\n\r\n/* ==========================================================================\r\n   Calculate Performance\r\n   ========================================================================== */\r\nfunction calcPerf() {\r\n  // Return the difference between two arrays\r\n  // Credits: https://stackoverflow.com/a/4026828\r\n  Array.prototype.diff = function(a) {\r\n    return this.filter(function(i) {\r\n      return a.indexOf(i) < 0;\r\n    });\r\n  };\r\n\r\n  //Empty current served array\r\n  perf.currentS = [];\r\n\r\n  // Add all current IDS to currentS array and the amount of orders\r\n  data.serving.forEach(serving => {\r\n    let id = serving.id;\r\n    perf.currentS.push(id);\r\n    perf.order[id] = serving.order.length;\r\n  });\r\n\r\n  // Get difference of currentS and previouS arrays\r\n  // If there's a difference, it either means there's a new client served or a client has been served\r\n  const newClient = perf.currentS.diff(perf.previousS); // new client\r\n  const servedClient = perf.previousS.diff(perf.currentS); // this client has been served now\r\n\r\n  //if new client or more than one, start time\r\n  if (newClient.length > 0) {\r\n    newClient.forEach(id => {\r\n      perf[id] = Date.now();\r\n    });\r\n  }\r\n\r\n  //if client or more than one have been served, stop time and get average time\r\n  if (servedClient.length > 0) {\r\n    servedClient.forEach(id => {\r\n      /*  Get current time and subtract the previous time of it.\r\n          The result is the needed time to serve this client.\r\n          Divide it by the amount of beers needed to serve\r\n          Get the average time per beer.\r\n          Add the average time to the timePerClient array\r\n      */\r\n      let neededTime = (Date.now() - perf[id]) / perf.order[id];\r\n      perf.timePerClient.push(neededTime);\r\n    });\r\n  }\r\n\r\n  //Use these console logs to understand this function\r\n\r\n  /*  console.log(\"Current:\" + JSON.stringify(perf.currentS));\r\n  console.log(\"Previous:\" + JSON.stringify(perf.previousS));\r\n  console.log(\"Difference 1: \" + JSON.stringify(newClient));\r\n  console.log(\"Difference 2: \" + JSON.stringify(servedClient));\r\n  console.log(\"AVG Time: \" + JSON.stringify(perf.timePerClient));\r\n  console.log(\"======\"); */\r\n\r\n  //Add this update rounds clients to be used for next round\r\n  perf.previousS = perf.currentS.slice();\r\n\r\n  //If there are more than 20 elements in the timePerClient array, remove the first ones until true\r\n  if (perf.timePerClient.length > 20) {\r\n    for (let i = 0; i > perf.timePerClient.length - 20; i++) {\r\n      perf.timePerClient.shift();\r\n    }\r\n  }\r\n}\r\n\r\n/* ==========================================================================\r\n   Display Performance\r\n   ========================================================================== */\r\nfunction displayPerf() {\r\n  //Get all times combined\r\n  let timeCombined = 0;\r\n  perf.timePerClient.forEach(elem => {\r\n    timeCombined += elem;\r\n  });\r\n\r\n  // Get the average time of all the combined times\r\n  const averageTime = timeCombined / perf.timePerClient.length;\r\n\r\n  //Calculcate percentage in relation to very fast serving of x seconds.\r\n  perf.avgPerf = Math.floor((perf.avgT / averageTime) * 100);\r\n  //console.log(perf.avgPerf);\r\n  if (isNaN(perf.avgPerf)) {\r\n    //no performance data available display N/A\r\n    perfNumber.textContent = \"N/A\";\r\n  } else {\r\n    //display performance\r\n    perfNumber.textContent = perf.avgPerf + \"%\";\r\n  }\r\n  updatePerfChart();\r\n}\r\n\r\n/* ==========================================================================\r\n   Display Performance Chart\r\n   ========================================================================== */\r\nfunction displayPerfChart() {\r\n  perfChart = new Chart(perfChartDOM, {\r\n    // The type of chart we want to create\r\n    type: \"doughnut\",\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n\r\n    // The data for our dataset\r\n    data: {\r\n      datasets: [\r\n        {\r\n          data: [50, 50],\r\n          backgroundColor: [\"#39B54A\"],\r\n          borderWidth: [0, 0]\r\n        }\r\n      ]\r\n    },\r\n\r\n    // Configuration options go here\r\n    options: {\r\n      legend: false,\r\n      rotation: Math.PI,\r\n      circumference: Math.PI,\r\n      events: []\r\n    }\r\n  });\r\n}\r\n\r\n/* ==========================================================================\r\n   Update Performance Chart\r\n   ========================================================================== */\r\nfunction updatePerfChart() {\r\n  if (isNaN(perf.avgPerf)) {\r\n    //keep previous chart\r\n  } else {\r\n    //update chart\r\n    let status;\r\n    if (perf.avgPerf >= 60) {\r\n      status = \"good\";\r\n    } else if (perf.avgPerf <= 30) {\r\n      status = \"bad\";\r\n    } else if (perf.avgPerf > 30 && perf.avgPerf < 60) {\r\n      status = \"okay\";\r\n    }\r\n    const color = {\r\n      bad: \"#ED1C24\",\r\n      okay: \"#F7931E\",\r\n      good: \"#39B54A\"\r\n    }[status];\r\n    perfChart.data.datasets[0].data = [perf.avgPerf, 100 - perf.avgPerf];\r\n    perfChart.data.datasets[0].backgroundColor = [color];\r\n    perfChart.update();\r\n  }\r\n}\r\n\r\n/* ==========================================================================\r\n   Display keg level chart\r\n   ========================================================================== */\r\nfunction displayKegLevelChart() {\r\n  kegLevelChart = new Chart(kegLevelChartDOM, {\r\n    type: \"bar\",\r\n    height: 400,\r\n    // The data for our dataset\r\n    data: {\r\n      labels: [\r\n        \"ELH\",\r\n        \"FTA\",\r\n        \"HBL\",\r\n        \"GTH\",\r\n        \"HEA\",\r\n        \"MIT\",\r\n        \"R26\",\r\n        \"RCH\",\r\n        \"SLR\",\r\n        \"SMP\"\r\n      ],\r\n      datasets: [\r\n        {\r\n          label: \"Keg level in cl\",\r\n          backgroundColor: [\"#39B54A\"],\r\n\r\n          data: [0, 10, 5, 2, 20, 30, 45]\r\n        }\r\n      ]\r\n    },\r\n\r\n    // Configuration options go here\r\n    options: {\r\n      legend: false,\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        yAxes: [\r\n          {\r\n            ticks: {\r\n              suggestedMin: 0,\r\n              suggestedMax: 2500,\r\n              beginAtZero: true,\r\n              min: 0,\r\n              max: 2500,\r\n              stepSize: 500\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/* ==========================================================================\r\n   Update Keg Level Data\r\n   ========================================================================== */\r\nfunction updateKegLevelData() {\r\n  kegLevel = [];\r\n  data.taps.forEach(keg => {\r\n    let beerVar = keg.beer.toLowerCase().replace(/ /g, \"\");\r\n    //console.log(beerVar);\r\n    let short = {\r\n      elhefe: \"ELH\",\r\n      fairytaleale: \"FTA\",\r\n      hollabacklager: \"HBL\",\r\n      githop: \"GTH\",\r\n      hoppilyeverafter: \"HEA\",\r\n      mowintime: \"MIT\",\r\n      row26: \"R26\",\r\n      ruinedchildhood: \"RCH\",\r\n      sleighride: \"SLR\",\r\n      steampunk: \"SMP\"\r\n    }[beerVar];\r\n    //console.log(short);\r\n\r\n    let beer = {\r\n      name: keg.beer,\r\n      short: short,\r\n      level: keg.level\r\n    };\r\n\r\n    kegLevel.push(beer);\r\n  });\r\n\r\n  //console.log(kegLevel);\r\n  updateKegLevelChart();\r\n}\r\n\r\n/* ==========================================================================\r\n   Update Keg Level Chart\r\n   ========================================================================== */\r\nfunction updateKegLevelChart() {\r\n  kegLevelChart.data.labels = [];\r\n  kegLevelChart.data.datasets[0].data = [];\r\n  kegLevelChart.data.datasets[0].backgroundColor = [];\r\n\r\n  let status;\r\n\r\n  kegLevel.forEach(keg => {\r\n    if (keg.level >= 1500) {\r\n      status = \"good\";\r\n    } else if (keg.level <= 500) {\r\n      status = \"bad\";\r\n    } else if (keg.level > 500 && keg.level < 1500) {\r\n      status = \"okay\";\r\n    }\r\n\r\n    const color = {\r\n      bad: \"#ED1C24\",\r\n      okay: \"#F7931E\",\r\n      good: \"#39B54A\"\r\n    }[status];\r\n\r\n    kegLevelChart.data.labels.push(keg.short);\r\n    kegLevelChart.data.datasets[0].data.push(keg.level);\r\n    kegLevelChart.data.datasets[0].backgroundColor.push(color);\r\n  });\r\n\r\n  kegLevelChart.update();\r\n}\r\n\r\n/* ==========================================================================\r\n   Display storage level chart\r\n   ========================================================================== */\r\nfunction displayStorageLevelChart() {\r\n  storageLevelChart = new Chart(storageLevelChartDOM, {\r\n    type: \"bar\",\r\n    // The data for our dataset\r\n    data: {\r\n      labels: [\r\n        \"ELH\",\r\n        \"FTA\",\r\n        \"HBL\",\r\n        \"GTH\",\r\n        \"HEA\",\r\n        \"MIT\",\r\n        \"R26\",\r\n        \"RCH\",\r\n        \"SLR\",\r\n        \"SMP\"\r\n      ],\r\n      datasets: [\r\n        {\r\n          label: \"Amount of kegs in storage\",\r\n          backgroundColor: [\"#39B54A\"],\r\n\r\n          data: [0, 10, 5, 2, 20, 30, 45]\r\n        }\r\n      ]\r\n    },\r\n\r\n    // Configuration options go here\r\n    options: {\r\n      legend: false,\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        yAxes: [\r\n          {\r\n            ticks: {\r\n              suggestedMin: 0,\r\n              suggestedMax: 20,\r\n              beginAtZero: true,\r\n              min: 0,\r\n              max: 10,\r\n              stepSize: 1\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/* ==========================================================================\r\n   Update Storage Level Data\r\n   ========================================================================== */\r\nfunction updateStorageLevelData() {\r\n  storageLevel = [];\r\n  data.storage.forEach(storage => {\r\n    let beerVar = storage.name.toLowerCase().replace(/ /g, \"\");\r\n    //console.log(beerVar);\r\n    let short = {\r\n      elhefe: \"ELH\",\r\n      fairytaleale: \"FTA\",\r\n      hollabacklager: \"HBL\",\r\n      githop: \"GTH\",\r\n      hoppilyeverafter: \"HEA\",\r\n      mowintime: \"MIT\",\r\n      row26: \"R26\",\r\n      ruinedchildhood: \"RCH\",\r\n      sleighride: \"SLR\",\r\n      steampunk: \"SMP\"\r\n    }[beerVar];\r\n    //console.log(short);\r\n\r\n    let beer = {\r\n      name: storage.name,\r\n      short: short,\r\n      level: storage.amount\r\n    };\r\n\r\n    storageLevel.push(beer);\r\n  });\r\n\r\n  //console.log(kegLevel);\r\n  updateStorageLevelChart();\r\n}\r\n\r\n/* ==========================================================================\r\n   Update Storage Level Chart\r\n   ========================================================================== */\r\nfunction updateStorageLevelChart() {\r\n  storageLevelChart.data.labels = [];\r\n  storageLevelChart.data.datasets[0].data = [];\r\n  storageLevelChart.data.datasets[0].backgroundColor = [];\r\n\r\n  let status;\r\n\r\n  storageLevel.forEach(storage => {\r\n    if (storage.level >= 6) {\r\n      status = \"good\";\r\n    } else if (storage.level <= 2) {\r\n      status = \"bad\";\r\n    } else if (storage.level > 2 && storage.level < 6) {\r\n      status = \"okay\";\r\n    }\r\n\r\n    const color = {\r\n      bad: \"#ED1C24\",\r\n      okay: \"#F7931E\",\r\n      good: \"#39B54A\"\r\n    }[status];\r\n\r\n    storageLevelChart.data.labels.push(storage.short);\r\n    storageLevelChart.data.datasets[0].data.push(storage.level);\r\n    storageLevelChart.data.datasets[0].backgroundColor.push(color);\r\n  });\r\n\r\n  storageLevelChart.update();\r\n}\r\n\r\n/* ==========================================================================\r\n   Toggle Modal Window\r\n   ========================================================================== */\r\nfunction toggleModalWindow(e) {\r\n  if (modalVisible) {\r\n    //Close Modal Window\r\n    modalWindow.style.removeProperty(\"top\");\r\n    console.log(\"Close modal\");\r\n  } else {\r\n    //Open Modal Window\r\n    const type = e.target.dataset.type;\r\n    const text = {\r\n      keg: {\r\n        header: \"KEG LEVEL\",\r\n        body:\r\n          \"Keg level displays the amount of beer left in a keg. The unit is in cl.<br /><br />Abbreviations:<br />ELH : El Hefe<br />FTA : Fairy Tale Ale<br />HBL : Hollaback Lager<br />GTH : GitHop<br />HEA : Hoppily Ever After<br />MIT : Mowintime<br />R26 : Row 26<br />RCH : Ruined Childhood<br />SLR : Sleighride<br />SMP : Steampunk\"\r\n      },\r\n      storage: {\r\n        header: \"STORAGE LEVEL\",\r\n        body:\r\n          \"Storage level displays the amount of kegs in the storage room.<br /><br />Abbreviations:<br />ELH : El Hefe<br />FTA : Fairy Tale Ale<br />HBL : Hollaback Lager<br />GTH : GitHop<br />HEA : Hoppily Ever After<br />MIT : Mowintime<br />R26 : Row 26<br />RCH : Ruined Childhood<br />SLR : Sleighride<br />SMP : Steampunk\"\r\n      },\r\n      topBox: {\r\n        header: \"OVERVIEW\",\r\n        body:\r\n          \"QUEUE displays the amount of clients waiting in line.<br /><br />SERVING displays the amount of clients currently beeing served<br /><br />PERFORMANCE displays the all around performance which is calculated based on the needed time to serve the last 20 beers. An average time is calculated and compared to 10s/beer which would be considered 100%. All performance over 60% is considered as very good!\"\r\n      }\r\n    }[type];\r\n\r\n    modalWindow.style.top = \"0px\";\r\n    modalH2.textContent = text.header;\r\n    modalP.innerHTML = text.body;\r\n    console.log(\"Open Modal\");\r\n  }\r\n  modalVisible = !modalVisible;\r\n}\r\n\r\n/* ==========================================================================\r\n   Toggle Mobile Menu\r\n   ========================================================================== */\r\nfunction toggleMobileMenu() {\r\n  if (mobileMenuVisible) {\r\n    //close menu\r\n    nav.style.removeProperty(\"top\");\r\n  } else {\r\n    //open menu\r\n    nav.style.top = \"0px\";\r\n  }\r\n  mobileMenuVisible = !mobileMenuVisible;\r\n}\r\n\r\n/* ==========================================================================\r\n   Update the time clock in the nav\r\n   ========================================================================== */\r\nfunction updateTime() {\r\n  const date = new Date();\r\n  const hours = date.getHours() >= 10 ? date.getHours() : \"0\" + date.getHours();\r\n  const min =\r\n    date.getMinutes() >= 10 ? date.getMinutes() : \"0\" + date.getMinutes();\r\n  const sec =\r\n    date.getSeconds() >= 10 ? date.getSeconds() : \"0\" + date.getSeconds();\r\n  timeNav.textContent = hours + \":\" + min + \":\" + sec;\r\n}\r\n"]}